generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  memberOf      Chat[]
  messages      Message[]
  accounts      Account[]
  sessions      Session[]
  onlineIn      Chat[]    @relation("OnlineChatMembers")

  contacts  Contact[] @relation("UserContactsOwner")
  contactOf Contact[] @relation("UserContactsTarget")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  owner   User   @relation("UserContactsOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  contact   User   @relation("UserContactsTarget", fields: [contactId], references: [id], onDelete: Cascade)
  contactId String

  @@id([ownerId, contactId])
}

model Message {
  id       String   @id @default(cuid())
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String
  body     String
  sentBy   User     @relation(fields: [sentById], references: [id], onDelete: Cascade)
  sentById String
  sentAt   DateTime @default(now())
}

model Chat {
  id            String    @id @default(cuid())
  type          ChatType  @default(DIALOG)
  members       User[]
  onlineMembers User[]    @relation("OnlineChatMembers")
  messages      Message[]
}

enum ChatType {
  DIALOG
  GROUP
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
